class SolutionSlow:
    def findTheDifference(self, s: str, t: str) -> str:
        seen_s = {}
        seen_t = {}

        for x, y in zip(t, s + '1'):
            seen_t[x] = seen_t.get(x, 0) + 1
            seen_s[y] = seen_s.get(y, 0) + 1

        for key, val in seen_t.items():
            if val != seen_s.get(key, 0):
                return key
            
class SolutionMedium:
    def findTheDifference(self, s: str, t: str) -> str:
        seen_s = {}
        seen_t = {}

        for ch in s:
            seen_s[ch] = seen_s.get(ch, 0) + 1

        for ch in t:
            seen_t[ch] = seen_t.get(ch, 0) + 1

            if seen_t[ch] > seen_s[ch] or ch not in seen_s:
                return ch
            
class SolutionFastest:
    def findTheDifference(self, s: str, t: str) -> str:
        """
        You are given two strings s and t.

        String t is generated by random shuffling string s and then add one more
        letter at a random position.

        Return the letter that was added to t.

        LeetCode: Beats 92.43%
        """
        g = lambda x: ord(x)
        return chr(sum(map(g, t)) - sum(map(g, s)))